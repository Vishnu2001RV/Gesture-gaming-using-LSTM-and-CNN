{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "\n",
    "# importing image and label data as numpy array\n",
    "p=np.load(r'C:/Users/Avinash/Documents/soft_assignment/paper.npy')\n",
    "pi=np.load(r'C:/Users/Avinash/Documents/soft_assignment/paper_0.npy')\n",
    "s=np.load(r'C:/Users/Avinash/Documents/soft_assignment/stone.npy')\n",
    "si=np.load(r'C:/Users/Avinash/Documents/soft_assignment/stone_0.npy')\n",
    "sc=np.load(r'C:/Users/Avinash/Documents/soft_assignment/scissors.npy')\n",
    "sci=np.load(r'C:/Users/Avinash/Documents/soft_assignment/scissors_0.npy')\n",
    "\n",
    "p=p.reshape(50,50,50,1)\n",
    "pi=pi.reshape(50,3)\n",
    "s=s.reshape(50,50,50,1)\n",
    "si=si.reshape(50,3)\n",
    "sc=sc.reshape(50,50,50,1)\n",
    "sci=sci.reshape(50,3)\n",
    "inp=np.concatenate((s,p,sc))\n",
    "out=np.concatenate((si,pi,sci))\n",
    "#testing \n",
    "import matplotlib.pyplot as plt\n",
    "k=p[0]\n",
    "k=k.reshape(50,50)\n",
    "plt.imshow(k)\n",
    "plt.show()\n",
    "k=s[0]\n",
    "k=k.reshape(50,50)\n",
    "plt.imshow(k)\n",
    "plt.show()\n",
    "k=sc[0]\n",
    "k=k.reshape(50,50)\n",
    "plt.imshow(k)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Using TensorFlow backend.\n",
      "WARNING: Logging before flag parsing goes to stderr.\n",
      "W1022 17:04:58.461914  3144 deprecation_wrapper.py:119] From c:\\users\\avinash\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\keras\\backend\\tensorflow_backend.py:66: The name tf.get_default_graph is deprecated. Please use tf.compat.v1.get_default_graph instead.\n",
      "\n",
      "W1022 17:04:58.514926  3144 deprecation_wrapper.py:119] From c:\\users\\avinash\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\keras\\backend\\tensorflow_backend.py:541: The name tf.placeholder is deprecated. Please use tf.compat.v1.placeholder instead.\n",
      "\n",
      "W1022 17:04:58.531358  3144 deprecation_wrapper.py:119] From c:\\users\\avinash\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\keras\\backend\\tensorflow_backend.py:4432: The name tf.random_uniform is deprecated. Please use tf.random.uniform instead.\n",
      "\n",
      "W1022 17:04:58.569445  3144 deprecation_wrapper.py:119] From c:\\users\\avinash\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\keras\\backend\\tensorflow_backend.py:4267: The name tf.nn.max_pool is deprecated. Please use tf.nn.max_pool2d instead.\n",
      "\n",
      "W1022 17:04:58.625655  3144 deprecation_wrapper.py:119] From c:\\users\\avinash\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\keras\\optimizers.py:793: The name tf.train.Optimizer is deprecated. Please use tf.compat.v1.train.Optimizer instead.\n",
      "\n",
      "W1022 17:04:58.645604  3144 deprecation_wrapper.py:119] From c:\\users\\avinash\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\keras\\backend\\tensorflow_backend.py:3657: The name tf.log is deprecated. Please use tf.math.log instead.\n",
      "\n",
      "W1022 17:04:58.652783  3144 deprecation.py:323] From c:\\users\\avinash\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\tensorflow\\python\\ops\\nn_impl.py:180: add_dispatch_support.<locals>.wrapper (from tensorflow.python.ops.array_ops) is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "Use tf.where in 2.0, which has the same broadcast rule as np.where\n",
      "W1022 17:04:58.876602  3144 deprecation_wrapper.py:119] From c:\\users\\avinash\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\keras\\backend\\tensorflow_backend.py:1033: The name tf.assign_add is deprecated. Please use tf.compat.v1.assign_add instead.\n",
      "\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/3\n",
      "150/150 [==============================] - 2s 12ms/step - loss: 0.6453 - acc: 0.6667\n",
      "Epoch 2/3\n",
      "150/150 [==============================] - 1s 8ms/step - loss: 0.3057 - acc: 0.9111\n",
      "Epoch 3/3\n",
      "150/150 [==============================] - 1s 7ms/step - loss: 0.0397 - acc: 1.0000\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<keras.callbacks.History at 0x254d45f8a20>"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#CNN network to recognise the gestures.\n",
    "\n",
    "\n",
    "from keras.layers import Conv2D, MaxPooling2D, Dense, Flatten\n",
    "from keras.models import Sequential\n",
    "net = Sequential()\n",
    "net.add(Conv2D(32, kernel_size=(5, 5), strides=(1, 1),\n",
    "                     activation='relu',\n",
    "                     input_shape=(50,50,1)))\n",
    "net.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2)))\n",
    "net.add(Conv2D(64, (5, 5), activation='relu'))\n",
    "net.add(MaxPooling2D(pool_size=(2, 2)))\n",
    "net.add(Flatten())\n",
    "net.add(Dense(1000, activation='relu'))\n",
    "net.add(Dense(3, activation='softmax'))\n",
    "net.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n",
    "net.fit(inp1,out1,epochs=3)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "#shuffling the data to avoid over training of model.\n",
    "\n",
    "from random import shuffle \n",
    "y=[]\n",
    "for i in range(0,150):\n",
    "    y.append(i)\n",
    "shuffle(y)\n",
    "#print(y)\n",
    "\n",
    "ind=[]\n",
    "for i in range(0,150):\n",
    "    k=[y[i], inp[i], out[i]]\n",
    "    ind.append(k)\n",
    "ind.sort()\n",
    "out1=[]\n",
    "inp1=[]\n",
    "for i in range(0,150):\n",
    "    inp1.append(ind[i][1])\n",
    "    out1.append(ind[i][2])\n",
    "inp1=np.array(inp1).astype('float32')/255\n",
    "out1=np.array(out1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#getting real time user input\n",
    "\n",
    "import urllib.request as ur\n",
    "import cv2\n",
    "import numpy as np\n",
    "import time\n",
    "import matplotlib.pyplot as plt\n",
    "url='http://192.168.43.1:8080/shot.jpg'\n",
    "imgResp = ur.urlopen(url)\n",
    "imgNp = np.array(bytearray(imgResp.read()),dtype=np.uint8)\n",
    "i = cv2.imdecode(imgNp,-1)\n",
    "plt.imshow(i)\n",
    "plt.show()\n",
    "g = cv2.cvtColor(i, cv2.COLOR_BGR2GRAY)\n",
    "plt.imshow(g)\n",
    "plt.show()\n",
    "g = cv2.threshold(g,100, 255, cv2.THRESH_BINARY)[1]\n",
    "plt.imshow(g)\n",
    "plt.show()\n",
    "g=cv2.resize(g,(50,50))\n",
    "plt.imshow(g)\n",
    "plt.show()\n",
    "k=g.reshape(1,50,50,1)\n",
    "e=net.predict(k)\n",
    "#c=input('')\n",
    "print(e)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3\n",
      "2\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 200x100 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "computer:    paper\n",
      "you:         scissor\n",
      "computer: 0           you: 1\n",
      "1\n",
      "1\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 200x100 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "computer:    stone\n",
      "you:         stone\n",
      "computer: 0           you: 1\n",
      "1\n",
      "1\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 200x100 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "computer:    stone\n",
      "you:         stone\n",
      "computer: 0           you: 1\n",
      "1\n",
      "1\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 200x100 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "computer:    stone\n",
      "you:         stone\n",
      "computer: 0           you: 1\n",
      "1\n",
      "2\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 200x100 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "computer:    paper\n",
      "you:         stone\n",
      "computer: 1           you: 1\n",
      "1\n",
      "2\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 200x100 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "computer:    paper\n",
      "you:         stone\n",
      "computer: 2           you: 1\n",
      "1\n",
      "2\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 200x100 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "computer:    paper\n",
      "you:         stone\n",
      "computer: 3           you: 1\n",
      "3\n",
      "2\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 200x100 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "computer:    paper\n",
      "you:         scissor\n",
      "computer: 3           you: 2\n",
      "1\n",
      "1\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 200x100 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "computer:    stone\n",
      "you:         stone\n",
      "computer: 3           you: 2\n",
      "2\n",
      "2\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 200x100 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "computer:    paper\n",
      "you:         paper\n",
      "computer: 3           you: 2\n",
      "2\n",
      "2\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 200x100 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "computer:    paper\n",
      "you:         paper\n",
      "computer: 3           you: 2\n",
      "2\n",
      "1\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 200x100 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "computer:    stone\n",
      "you:         paper\n",
      "computer: 3           you: 3\n",
      "2\n",
      "3\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 200x100 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "computer:    scissor\n",
      "you:         paper\n",
      "computer: 4           you: 3\n",
      "3\n",
      "3\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 200x100 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "computer:    scissor\n",
      "you:         scissor\n",
      "computer: 4           you: 3\n",
      "1\n",
      "3\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 200x100 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "computer:    scissor\n",
      "you:         stone\n",
      "computer: 4           you: 4\n"
     ]
    }
   ],
   "source": [
    "#LSTM model to predict the moves\n",
    "\n",
    "\n",
    "import urllib.request as ur\n",
    "import cv2\n",
    "import numpy as np\n",
    "from numpy import array\n",
    "from keras.models import Sequential\n",
    "from keras.layers import LSTM\n",
    "from keras.layers import Dense\n",
    "import time\n",
    "import matplotlib.pyplot as plt\n",
    "from time import sleep\n",
    "url='http://192.168.43.1:8080/shot.jpg'\n",
    "raw_seq = [1,3,2,1]\n",
    "\n",
    "#getting user data in real time\n",
    "\n",
    "def input_():\n",
    "    imgResp = ur.urlopen(url)\n",
    "    imgNp = np.array(bytearray(imgResp.read()),dtype=np.uint8)\n",
    "    i = cv2.imdecode(imgNp,-1)\n",
    "    g = cv2.cvtColor(i, cv2.COLOR_BGR2GRAY)\n",
    "    g = cv2.threshold(g,100, 255, cv2.THRESH_BINARY)[1]\n",
    "    g=cv2.resize(g,(50,50))\n",
    "    img1=g\n",
    "    k=g.reshape(1,50,50,1)\n",
    "    e=net.predict(k)\n",
    "    if(e[0][0]==1):\n",
    "        return 1\n",
    "    if(e[0][1]==1):\n",
    "        return 2\n",
    "    if(e[0][2]==1):\n",
    "        return 3\n",
    "    return 0\n",
    "    \n",
    "def output_(o):\n",
    "    if(o==1):\n",
    "        ki='stone'\n",
    "    elif(o==2):\n",
    "        ki='paper'\n",
    "    elif(o==3):\n",
    "        ki='scissor'\n",
    "    else:\n",
    "        ki='null'\n",
    "    return(ki)\n",
    "\n",
    "def result_(a,b):\n",
    "    print(a)\n",
    "    print(b)\n",
    "    k1=inp[a*50-5]\n",
    "    k1=k1.reshape(50,50)\n",
    "    k2=inp[b*50-5]\n",
    "    k2=k2.reshape(50,50)\n",
    "    fig=plt.figure(figsize=(2, 1))\n",
    "    fig.add_subplot(1,2,1)\n",
    "    plt.imshow(k1)\n",
    "    plt.xlabel(\"player\")\n",
    "    fig.add_subplot(1,2,2)\n",
    "    plt.imshow(k2)\n",
    "    plt.xlabel(\"computer\")\n",
    "    plt.show()\n",
    "    if((a==1 and b==2)or(a==2 and b==3)or(a==3 and b==1)):\n",
    "        r=1\n",
    "        \n",
    "        raw_seq.append(b)\n",
    "    elif((b==1 and a==2)or(b==2 and a==3)or(b==3 and a==1)):\n",
    "        r=2\n",
    "        if(a==1):raw_seq.append(2)\n",
    "        if(a==2):raw_seq.append(3)    \n",
    "        if(a==3):raw_seq.append(1)\n",
    "    else:\n",
    "        r=0\n",
    "        if(a==1):raw_seq.append(2)\n",
    "        if(a==2):raw_seq.append(3)    \n",
    "        if(a==3):raw_seq.append(1)\n",
    "    return(r)\n",
    "    \n",
    "\n",
    "c=0\n",
    "m=0 \n",
    "\n",
    "def split_sequence(sequence, n_steps):\n",
    "\tX, y = list(), list()\n",
    "\tfor i in range(len(sequence)):\n",
    "\t\tend_ix = i + n_steps\n",
    "\t\tif end_ix > len(sequence)-1:\n",
    "\t\t\tbreak\n",
    "\t\tseq_x, seq_y = sequence[i:end_ix], sequence[end_ix]\n",
    "\t\tX.append(seq_x)\n",
    "\t\ty.append(seq_y)\n",
    "\treturn array(X), array(y)\n",
    "\n",
    "\n",
    "\n",
    "for i in range(0,15):\n",
    "    n_steps = 3\n",
    "    X, y = split_sequence(raw_seq, n_steps)\n",
    "    n_features = 1\n",
    "    X = X.reshape((X.shape[0], X.shape[1], n_features))\n",
    "\n",
    "    \n",
    "    model = Sequential()\n",
    "    model.add(LSTM(50, activation='relu', return_sequences=True, input_shape=(n_steps, n_features)))\n",
    "    model.add(LSTM(50, activation='relu'))\n",
    "    model.add(Dense(1))\n",
    "    model.compile(optimizer='adam', loss='mse')\n",
    "    model.fit(X, y, epochs=50, verbose=0)\n",
    "    # demonstrate prediction\n",
    "    a=len(raw_seq)\n",
    "    \n",
    "    i=input_()\n",
    "    x= array(raw_seq[a-3:a:1])\n",
    "    x=x.reshape((1,3,1))\n",
    "    out= model.predict(x, verbose=0)\n",
    "    out=round(float(out))\n",
    "    if(out<=3):\n",
    "        r=result_(i,out)\n",
    "\n",
    "        print('computer:    '+output_(out))\n",
    "        print('you:         '+output_(i))\n",
    "\n",
    "        if(r==1):\n",
    "            c=c+1\n",
    "        if(r==2):\n",
    "            m=m+1\n",
    "\n",
    "        print('computer: '+str(c)+'           you: '+str(m))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "45\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
